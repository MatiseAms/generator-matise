@function bp($bp){
	$breakpoint: map-get($grid-breakpoints,$bp);
	@return $breakpoint;
}

@function grid($value){
	$values: null;
	@if length($value) > 1{
		@each $size in $value{
			$v: calc-grid($size); $values: $values #{$v};
		}
	} @else{
		$values: calc-grid($value);
	}
	@return $values;
}

@function calc-grid($v){
	$value: (100/$grid-columns)*$v;
	//convert px to vw based on design file
	@if unit($v) == "px"{
		$value: (strip-unit($v)*100)/strip-unit($grid-design-width);
	}
	//convert rem to vw based on design file
	@if unit($v) == "rem"{
		$value: ((strip-unit($v)*$base-font-size)*100)/strip-unit($grid-design-width);
	}
	@return unquote("#{$value}vw");
}

@function mq($min: 0, $max: 0, $screen: $grid-screen){
	@if $max{
		@if $max > 0{
			$mq: "#{$screen} and (min-width: #{$min}px) and (max-width: #{$max}px)";
			@return $mq;
		}
	}
	@if $min > -1{
		$mq: "#{$screen} and (min-width: #{$min}px)";
		@return $mq;
	}
	@else{
		@warn "No valid inputs in Media Query function";
		@return "";
	}
	//@return "#{$screen} and (min-width: #{$min}px)";
}
@function grid-mq-min($columns,$width){
	@if unit($columns) == "rem"{
		@debug "please just use Grid units!"; //
		$one-column: $grid-design-width / $grid-columns; //
		$width: strip-unit((strip-unit($columns) * 16) / $one-column);
	}
	$minimum-screenwidth: (($width * $grid-columns) / $grid-design-width) * $grid-design-width; //
	$result: "(max-width: #{$minimum-screenwidth}px)";
	//@debug $result;
	@return $result;
}

@function grid-mq-max($columns,$width){
	@if unit($columns) == "rem"{
		@debug "please just use Grid units!"; //
		$one-column: $grid-design-width / $grid-columns; //
		$width: strip-unit((strip-unit($columns) * 16) / $one-column);
	}
	$minimum-screenwidth: (($width * $grid-columns) / $grid-design-width) * $grid-design-width; //
	$result: "(min-width: #{$minimum-screenwidth}px)";
	//@debug $result;
	@return $result;
}
