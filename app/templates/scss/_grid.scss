$a: (
  padding: padding,
  padding-top: padding-top,
  padding-left: padding-left,
  padding-right: padding-right,
  padding-bottom: padding-right,
  margin: margin,
  margin-top: margin-top,
  margin-left: margin-left,
  margin-right: margin-right,
  margin-bottom: margin-right,
  top: top,
  left: left,
  right: right,
  bottom: bottom,
  width: width,
  max-width: width,
  min-width: width,
  height: height,
  min-height: height
);


@for $i from 1 through 20{
	//	$v: $i/10;
	$v: $i;
	@if $v < 10{
		$v: 0#{$v};
	}
	$width: (100/$grid-columns)*($i/10);
	@each $class, $value in $a{
    $together: #{$class}-#{$v};
		.#{$together}{
			#{$value}: #{$width}vw;
		}
	}
}

@function grid($v,$min: 0){
  $value: (100/$grid-columns)*$v;
  @if $value < $min {
    $value: $min;
  }
	@return unquote("#{$value}vw");
}


$grid-025: grid(0.25);
$grid-050: grid(0.5);
$grid-075: grid(0.75);
$grid-1: grid(1);
$grid-125: grid(1.25);
$grid-150: grid(1.5);
$grid-175: grid(1.75);
$grid-2: grid(2);
$grid-3: grid(3);
$grid-4: grid(4);
$grid-5: grid(5);


@function mq($min: 0,$max: 0){
  @if $max > 0{
    $mq: "screen and (min-width: #{$min}px) and (max-width: #{$max}px)";
    @return $mq;
  } @elseif $min > 0{
    $mq: "screen and (min-width: #{$min}px)";
    @return $mq;
  }
}


.row{ max-width: $grid-row-width; width: 100%; margin: auto; display: flex; justify-content: flex-start;
  flex-flow: row wrap;
  &.center{ justify-content: center; }
}

%col{ box-sizing: border-box !important;
  .content{ padding: 1rem; font-family: inherit; }
}
//@include wildcard('col-'){ @extend %col; }
.col, .column, .columns{ @extend %col; }




@mixin createGridClasses($child: false){
  $childClass: '';
  @if $child == true{
    $childClass: ' .column';
  }
  @for $a from 0 through $grid-columns{
    &.column-#{$a}#{$childClass}{
      width: percentage($a/$grid-columns);
    }
    &.offset-#{$a}#{$childClass}{
      margin-left: percentage($a/$grid-columns);
    }
    &.push-#{$a}#{$childClass}{
      margin-right: percentage($a/$grid-columns);
    }
    &.pull-#{$a}#{$childClass}{
      margin-left: -#{percentage($a/$grid-columns)};
    }
  }


  $min-width: 0;
  @for $i from 1 through length($grid-breakpoints){

    $bp: nth($grid-breakpoints,$i);
    $mq-only: "#{$grid-screen} and (min-width: #{$min-width}px) and (max-width: #{nth($bp,2)}px)";
    $mq: "#{$grid-screen} and (min-width: #{$min-width}px)";
    $min-width: #{nth($bp,2)+1};
    @if $i == 1{
      @each $part,$percentage in $grid-parts{
        &.#{$part}#{$childClass}{
          width: percentage($percentage);
        }
      }
    }
    @media #{$mq-only}{
      &.#{nth($bp,1)}-only-0#{$childClass}{
        width: 0%;
        display: none;
      }
      @each $part,$percentage in $grid-parts{
        &.#{nth($bp,1)}-only-#{$part}#{$childClass}{
          width: percentage($percentage);
        }
      }
      @for $a from 1 through $grid-columns{
        &.#{nth($bp,1)}-only-#{$a}#{$childClass}{
          width: percentage($a/$grid-columns);
        }
        &.offset-#{nth($bp,1)}-only-#{$a}#{$childClass}{
          margin-left: percentage($a/$grid-columns);
        }
        &.push-#{nth($bp,1)}-only-#{$a}#{$childClass}{
          margin-right: percentage($a/$grid-columns);
        }
        &.pull-#{nth($bp,1)}-only-#{$a}#{$childClass}{
          margin-left: -#{percentage($a/$grid-columns)};
        }
      }
    }
    @media #{$mq}{
      &.#{nth($bp,1)}-0#{$childClass}{
        width: 0%;
        display: none;
      }
      @if $i == 1{
        @each $part,$percentage in $grid-parts{
          &.#{nth($bp,1)}-#{$part}#{$childClass}{
            width: percentage($percentage);
          }
        }
      }
      @for $a from 1 through $grid-columns{
        &.#{nth($bp,1)}-#{$a}#{$childClass}{
          width: percentage($a/$grid-columns);
        }
        &.offset-#{nth($bp,1)}-#{$a}#{$childClass}{
          margin-left: percentage($a/$grid-columns);
        }
        &.push-#{nth($bp,1)}-#{$a}#{$childClass}{
          margin-right: percentage($a/$grid-columns);
        }
        &.pull-#{nth($bp,1)}-#{$a}#{$childClass}{
          margin-left: -#{percentage($a/$grid-columns)};
        }
      }
    }
  }
}

.column{
  @include createGridClasses(false);
}
.row{
  @include createGridClasses(true);
}

$small-only: mq(0,map-get($grid-breakpoints,'small'));
@debug mq(0,map-get($grid-breakpoints,'small'));
$landscape: "#{$grid-screen} and (orientation: landscape)";
$portrait: "#{$grid-screen} and (orientation: portrait)";
